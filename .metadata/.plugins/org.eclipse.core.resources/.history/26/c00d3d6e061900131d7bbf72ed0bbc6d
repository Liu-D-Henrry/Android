package com.will.phoneblocker;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.ContactsContract;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

public class BlackListActivity extends Activity {

	private static final String TAG = "-- BlackListActivity --";
	
	private EditText phoneNumber;
	private Button add;
	private ProgressDialog pd;
	private ListView blackList;
	private BlockerApplication application;
	private ArrayList<HashMap<String, String>> blackNumberList;
	
	Handler myHandler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			if (msg.what == 0x123) {
				Bundle data = msg.getData();
				@SuppressWarnings("unchecked")
				final ArrayList<String> names = (ArrayList<String>) data.getSerializable("names");
				@SuppressWarnings("unchecked")
				final ArrayList<ArrayList<String>> details = (ArrayList<ArrayList<String>>) data.getSerializable("details");
//				Log.d(TAG, details.toString());
				setupView(names, details);
			}
		}
		
	};
	
	private class MyBaseExpandableListAdapter extends BaseExpandableListAdapter {

		private final ArrayList<String> names;
		private final ArrayList<ArrayList<String>> details;
		private HashMap<String, String> checkedItem = new HashMap<String, String>();
		
		public MyBaseExpandableListAdapter(final ArrayList<String> names, final ArrayList<ArrayList<String>>details) {
			super();
			this.names = names;
			this.details = details;
		}
		
		public HashMap<String, String> getCheckedItem() {
			return checkedItem;
		}
		
		@Override
		public Object getChild(int groupPosition, int childPosition) {
			// TODO Auto-generated method stub
			return details.get(groupPosition).get(childPosition);
		}

		@Override
		public long getChildId(int groupPosition, int childPosition) {
			// TODO Auto-generated method stub
			return childPosition;
		}

		@Override
		public View getChildView(int groupPosition, int childPosition,
				boolean isLastChild, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			String phone = (String) getChild(groupPosition, childPosition).toString();
			CheckBox cb = new CheckBox(BlackListActivity.this);
			cb.setPadding(100, 0, 0, 0);
			cb.setText(phone);
//			cb.setText("test");
			cb.setOnCheckedChangeListener(new OnCheckedChangeListener() {
				
			});
			return cb;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			// TODO Auto-generated method stub
			return details.get(groupPosition).size();
		}

		@Override
		public Object getGroup(int groupPosition) {
			// TODO Auto-generated method stub
			return names.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			// TODO Auto-generated method stub
			return names.size();
		}

		@Override
		public long getGroupId(int groupPosition) {
			// TODO Auto-generated method stub
			return groupPosition;
		}

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded,
				View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			String name = getGroup(groupPosition).toString();
			TextView tv = new TextView(BlackListActivity.this);
			tv.setPadding(100, 0, 0, 0);
			tv.setText(name);
			return tv;
		}

		@Override
		public boolean hasStableIds() {
			// TODO Auto-generated method stub
			return true;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			// TODO Auto-generated method stub
			return true;
		}
		
	}
	private void setupView(final ArrayList<String> names, final ArrayList<ArrayList<String>>details) {
		final ArrayList<HashMap<String, String>> black = new ArrayList<HashMap<String, String>>(); 
		View resultDialog = getLayoutInflater().inflate(R.layout.contacts_list, null);
		ExpandableListView list = (ExpandableListView) resultDialog.findViewById(R.id.contactslist);
		ExpandableListAdapter adapter = new MyBaseExpandableListAdapter(names, details);
		list.setAdapter(adapter);
		pd.dismiss();
		new AlertDialog.Builder(BlackListActivity.this)
			.setView(resultDialog)
			.setPositiveButton("OK", new DialogInterface.OnClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which) {
					// TODO Auto-generated method stub
					Log.d(TAG, )
				}
			})
			.show();
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.black_list_activity);
		application = (BlockerApplication) getApplication();
		
		phoneNumber = (EditText) findViewById(R.id.number);
		blackList = (ListView) findViewById(R.id.blacklist);
		
		blackNumberList = application.getBlackList();
		SimpleAdapter adapter = new SimpleAdapter(BlackListActivity.this, 
				blackNumberList, 
				R.layout.line, 
				new String[] {"name", "phone"}, 
				new int[] {R.id.name, R.id.phone});
		blackList.setAdapter(adapter);
		
		add = (Button) findViewById(R.id.add);
		add.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub
				application.insertData("Unknown Name", phoneNumber.getText().toString());
				blackNumberList = application.getBlackList();
				SimpleAdapter adapter = new SimpleAdapter(BlackListActivity.this, 
						blackNumberList, 
						R.layout.line, 
						new String[] {"name", "phone"}, 
						new int[] {R.id.name, R.id.phone});
				blackList.setAdapter(adapter);
			}
			
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		getMenuInflater().inflate(R.menu.black_list_menu, menu);
		return true;
	}


	@Override
	public boolean onMenuItemSelected(int featureId, MenuItem item) {
		// TODO Auto-generated method stub
		if (item.getItemId() == R.id.contacts) {
			pd = new ProgressDialog(BlackListActivity.this);
			pd.setTitle("Get Contacts");
			pd.setMessage("Getting Contacts, please wait a moment...");
			pd.show();
			
			new Thread() {

				@Override
				public void run() {
					// TODO Auto-generated method stub
					final ArrayList<String> names = new ArrayList<String>();
					final ArrayList<ArrayList<String>> details = new ArrayList<ArrayList<String>>();
					Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
					while (cursor.moveToNext()) {
						String contactId = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID));
						
						String name = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
						names.add(name);
						
						Cursor phones = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, 
								null, ContactsContract.CommonDataKinds.Phone.CONTACT_ID + "=" + contactId, null, null);
						ArrayList<String> detail = new ArrayList<String>();
						while (phones.moveToNext()) {
							String phone = phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
							detail.add(phone);
						}
						phones.close();
						details.add(detail);
					}
					cursor.close();
					
					Message msg = new Message();
					msg.what = 0x123;
					Bundle data = new Bundle();
					data.putSerializable("names", names);
					data.putSerializable("details", details);
					msg.setData(data);
					myHandler.sendMessage(msg);
				}
				
			}.start();
		}
		return  true;
	}
	
}
